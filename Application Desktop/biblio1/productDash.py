# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'productDash.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from itertools import product
from typing import Collection, Text
from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
import pymongo
from pymongo import collection
from pymongo.errors import NotMasterError
import numpy
import pandas as pd
import  pymongo
from pymongo import MongoClient
import sys
#crÃ©ation bd
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
db = myclient["DesktopApp"]
#collection categorie
collectionCategory=db.category
  


class Ui_MainWindow(object):


    
    def disableButtonAddCat(self):
        if len(self.catid.text()) > 0 and len(self.catname.text()) > 0 :
                self.addcat.setEnabled(True)

    
    def SearchCatname(self):
            d =self.catid.text()  
            n=self.catname.text()
            collectionCategory=db.category

            listeid = list(collectionCategory.find({"_id":d}))
            listename=list(collectionCategory.find({"Name":n}))
            if len(listeid) ==1:

                    if not n:
                        self.catname.setText(listeid[0]["Name"])
                        self.msg4.show()
                    else:
                            if (n !=(listeid[0]["Name"])):
                                self.msg3.show()
            
            else :
                    self.msg3.show()
                       
           
 
 
 
    def deleteCategory(self):
                x=self.catid.text()
                collectionCategory=db.category
                myquery={"_id":x}
                c=list(collectionCategory.find(myquery))
                if(collectionCategory.delete_one(myquery)):
                        self.SubCategoryInput_3.clear()
                        self.SubCategoryInput_2.clear()
                        for item in (collectionCategory.find()):
                                self.SubCategoryInput_3.addItems([item['Name']])
                                self.SubCategoryInput_2.addItems([item['Name']])
                        self.ClearCategory()
                        self.msg5.show()
                else:
                        self.msg3.show()
    
    
    
    def deleteSousCategory(self):
            x=self.subid.text()
            collectionSousCategory=db.SubCategory
            myquery={"_id":x}
            if (collectionSousCategory.delete_one(myquery)):
                self.ClearSubcategory
                self.msg5.show()
            else:
                    self.msg3.show()


           
    
    
    
    def deleteProduct(self):
            x=self.pid.text()
            collectionProduct=db.Product
            myquery={"_id":x}
            if (collectionProduct.delete_one(myquery)):
                self.ClearProduct
                self.msg5.show()
            else:
                self.msg3.show()



    def refresh(self):
        collectionCategory=db.category
        collectionSousCategorie=db.SubCategory
        collectionProduct=db.product
#Ajout dans le combobox de category et sub category
        self.SubCategoryInput_2.clear()
        self.SubCategoryInput_3.clear()
        item_details = collectionCategory.find()
        for item in item_details:
                self.SubCategoryInput_2.addItems([item['Name']])
                self.SubCategoryInput_3.addItems([item['Name']])


    def SearchSousCatname(self):
            d =self.subid.text()  
            n=self.subname.text()
            collectionSousCategory=db.SubCategory
            collectionCategory=db.category
            item_details = collectionCategory.find()
            
            listeid = list(collectionSousCategory.find({"_id":d}))
            listename=list(collectionSousCategory.find({"Name":n}))

            if  (n ==""):
                
                if len(listeid) ==1:
                         self.subname.setText(listeid[0]["Name"])
                         item_details = list(collectionCategory.find({"_id":listeid[0]["CategoryiD"]}))
                         self.SubCategoryInput_2.setCurrentText(item_details[0]["Name"])
                         print(item_details[0]["Name"])
                         self.msg4.show()

                else:
                        self.msg3.show()
            else: 
                    if (d==""):
                            
                        self.subid.setText(listename[0]["_id"])
                        item_details = list(collectionCategory.find({"_id":listename[0]["CategoryiD"]}))
                        self.SubCategoryInput_2.setCurrentText(item_details[0]["Name"])
                        self.msg4.show()
                    else:
                        if(listename==listeid) :
                              item_details = list(collectionCategory.find({"_id":listename[0]["CategoryiD"]}))
                              self.SubCategoryInput_2.setCurrentText(item_details[0]["Name"])
                              self.msg4.show()
                        else:
                              self.msg3.show()







            
    
    
    def ClearCategory(self):
          self.catid.clear()
          self.catname.clear()
    
    
    
    def ClearSubcategory(self):
            self.subid.clear()
            self.subname.clear()
            self.SubCategoryInput_2.setCurrentIndex(-1)
    
    
    
    def ClearProduct(self):
            self.pid.clear()
            self.proname.clear()
            self.proqtyline.clear()
            self.sell.clear()
            self.lineEdit_10.clear()
            self.SubCategoryInput_3.setCurrentIndex(-2)
            self.subline.setCurrentIndex(-3)
        
    
    def searchProduct(self):
                ppid=self.pid.text()
                collectionSousCategory=db.SubCategory
                collectionProduct=db.Product
                collectionCategory=db.category
                item_details = list(collectionProduct.find({"_id":ppid}))
                self.sell.setText(str(item_details[0]["Selling Price"]))
                self.lineEdit_10.setText(str(item_details[0]["Cost Price"]))
                self.proname.setText(item_details[0]["Name"])
                self.proqtyline.setText(str(item_details[0]["Quantity"]))
                items=collectionProduct.find({"_id":ppid})
                for i in items:
                        z=i['Category ID']
                        w=i['Sub Category iD']
                item=collectionCategory.find({'_id':z})
                for j in item:
                        l=collectionSousCategory.find({'_id':w})
                        for o in l:
                                if z==j['_id'] and w==o['_id']:
                                 self.SubCategoryInput_3.setCurrentText(j['Name'])
                                 self.subline.setCurrentText(o['Name'])
                        
                print(z)
                        
                self.msg4.show()
               
           

    def updateCat(self):
                d =self.catid.text()  
                n=self.catname.text()
                collectionCategory=db.category
                co=collectionCategory.find_one({'Name':n})
                if (d and n):
                        if (co==None):

                                myquery = { "_id": d  }
                                newvalues = { "$set": { "_id": d,"Name":n } }         
                                if(collectionCategory.update_one(myquery, newvalues)):
                                        self.msg.show()
                                        item_details=collectionCategory.find()
                                        self.SubCategoryInput_2.clear()
                                        for item in item_details:
                                                self.SubCategoryInput_2.addItems([item['Name']])
                                        self.SubCategoryInput_3.clear()
                                        for items in (collectionCategory.find()):
                                                        self.SubCategoryInput_3.addItems([items['Name']])
                                else:
                                        self.msg3.show()
                        else:
                                pass
                                self.msg7.show()
                else:
                        self.msg3.show()


    
    
    def updateSousCat(self):
                d =self.subid.text()  
                n=self.subname.text()
                collectionSousCategory=db.SubCategory
                collectionCategory=db.category

                myquery = { "_id":d  }
                cc=self.SubCategoryInput_2.currentText()
                if (d and n):

                        item_details = collectionCategory.find()
                        for item in item_details:
                                        if (item['Name'] ==cc):
                                                v=self.subid.text()
                                                z=self.subname.text()
                                                newvalues = { "$set": { "_id":v ,"Name":z,"CategoryiD":item['_id'] } }         
                                                if(collectionSousCategory.update_many(myquery, newvalues)):
                                                        self.msg.show()
                                                else:
                                                                pass
                                                                self.msg7.show()
                                               
                else:
                        self.msg3.show()
                                                


    def updateProduct(self):
        collectionProduct=db.Product
        idpro=self.pid.text()
        catname=self.SubCategoryInput_3.currentText()
        productname=self.proname.text()
        proqty=self.proqtyline.text()
        selling=self.sell.text()
        cost=self.lineEdit_10.text()
        souscatname=self.subline.currentText()
        collectionSubCategory=db.SubCategory
        collectionCategory=db.category
        
        myquery = { "_id":idpro }
        if( (idpro != "") and (productname != "") and (proqty != "") and (selling != "") and (cost != "")):
               
                
                        items = collectionSubCategory.find()
                        m=""
                        for item in items:
                                if (item['Name'] ==souscatname):
                                        m=souscatname
                                        item_details =collectionCategory.find()
                                        for itemss in item_details:
                                                if (itemss['Name'] ==catname):
                                                        newvalues = { "$set": { "_id":self.pid.text(),"Category ID":itemss['_id'],"Sub Category iD":item['_id'],"Name":productname,"Cost Price":cost,"Selling Price":selling,"Quantity":proqty} }         
                                                        if(collectionProduct.update_many(myquery, newvalues)):
                                                                self.msg.show()
                                                        else:
                                                                self.msg3.show()
                
                                                


        
                        
                        

    
    
    
    
    
    
    
    def Ajout_categorie(self):
            id =self.catid.text()
            nom =self.catname.text()

            
            collectionCategory=db.category
            l=collectionCategory.find_one({'_id':id})
            m=collectionCategory.find_one({'Name':nom})
            if (id!="") and(nom!=""):
                if (l==None) and (m!=None):

                        category_1 = {
                                        "_id":id,
                                        "Name":nom
                                        }
                        rec_id1 = collectionCategory.insert_one(category_1)
                        if(rec_id1):
                                self.SubCategoryInput_3.addItem(nom)
                                self.SubCategoryInput_2.addItems([nom])
                                self.msg2.show()
                else:
                        pass
                        self.msg7.show()
                                
                
                

   
   


    def Ajout_souscategorie(self):
        collectionCategory=db.category
        collectionSousCategorie=db.SubCategory

        sousid=self.subid.text()
        print(sousid)
        souscatnom=self.subname.text()
        print(souscatnom)   
        combo = self.SubCategoryInput_2.currentText()
        item_details = collectionCategory.find()
        if ((sousid != "")and (souscatnom!="")):
                xx=collectionSousCategorie.find_one({'_id':sousid})
                cc=collectionSousCategorie.find_one({'Name':souscatnom})
                if (xx==None) and (cc==None):
                        for item in item_details:
                                if (item['Name'] ==combo):
                                        sous_categorie={
                                        "_id":sousid, 
                                        "Name":souscatnom,
                                        "CategoryiD":item['_id']}
                                        self.msg2.show()
                                        rec_id1 = collectionSousCategorie.insert_one(sous_categorie)
                                        if (rec_id1):
                                                self.msg2.show()
                else:
                        pass
                        self.msg7.show()
        else:
                self.msg3.show()

    
    
    
    def Ajout_produit(self):
        collectionProduct=db.Product
        idpro=self.pid.text()
        catname=self.SubCategoryInput_3.currentText()
        productname=self.proname.text()
        proqty=self.proqtyline.text()
        selling=self.sell.text()
        cost=self.lineEdit_10.text()
        souscatname=self.subline.currentText()
        collectionCategory=db.category
        collectionSubCategory=db.SubCategory
        items = collectionSubCategory.find()
        ll=collectionProduct.find_one({'_id':idpro})
        m=""
        if( (idpro != "") and (productname != "") and (catname !="")and(proqty != "") and (selling != "") and (cost != "")):
                if (ll==None) :
                        for item in items:
                                if (item['Name'] ==souscatname):
                                        m=souscatname
                        item_details = collectionCategory.find()
                        for item in item_details:
                                if (item['Name'] ==catname):
                                        items = collectionSubCategory.find()
                                        for i in items:
                                                        if (i['Name'] ==m):
                                                                produiit={
                                                                "_id":idpro,
                                                                "Category ID"
                                                                :
                                                                item['_id'],
                                                                "Sub Category iD"
                                                                :
                                                                i['_id'],
                                                                "Name"
                                                                :
                                                                productname,
                                                                "Cost Price"
                                                                :
                                                                int(cost),
                                                                "Selling Price"
                                                                :
                                                                int(selling),
                                                                "Quantity"
                                                                :
                                                                int(proqty)}

                                                                rec_id1 = collectionProduct.insert_one(produiit)
                                                                self.msg2.show()
                else:
                        pass
                        self.msg7.show()
        else:
                self.msg3.show()

     





    def dependency(self):
            self.subline.clear()
            x=self.SubCategoryInput_3.currentText()
            cat=db.category
            soucat=db.SubCategory
            liste=cat.find_one({"Name":x})
            if (liste):
                liste2=soucat.find()
                for j in liste2:
                        if (j["CategoryiD"]==liste["_id"]):
                                        print(j["CategoryiD"])
                                        self.subline.addItems([j["Name"]])
            else:
                    print("nnnnn")



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        MainWindow.setStyleSheet("    background-color: rgb(34, 76, 132);\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(11, 11, 1258, 113))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setSizeIncrement(QtCore.QSize(15, 0))
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setLineWidth(3)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Header = QtWidgets.QWidget(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.Header.sizePolicy().hasHeightForWidth())
        self.Header.setSizePolicy(sizePolicy)
        self.Header.setStyleSheet("#Header{\n"
"    background-color: rgb(255, 255, 255);\n"
"}")
        self.Header.setObjectName("Header")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.Header)
        self.horizontalLayout.setContentsMargins(0, 0, 20, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget_2 = QtWidgets.QWidget(self.Header)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout.addWidget(self.widget_2)
        self.ShopIcon = QtWidgets.QLabel(self.Header)
        self.ShopIcon.setMinimumSize(QtCore.QSize(50, 50))
        self.ShopIcon.setMaximumSize(QtCore.QSize(50, 50))
        self.ShopIcon.setText("")
        self.ShopIcon.setPixmap(QtGui.QPixmap("../assets/shop.png"))
        self.ShopIcon.setScaledContents(True)
        self.ShopIcon.setObjectName("ShopIcon")
        self.horizontalLayout.addWidget(self.ShopIcon)
        self.Product = QtWidgets.QLabel(self.Header)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.Product.setFont(font)
        self.Product.setStyleSheet("#Title{\n"
"    \n"
"    color: rgb(0, 0, 127);\n"
"}")
        self.Product.setObjectName("Product")
        self.horizontalLayout.addWidget(self.Product)
        self.widget_3 = QtWidgets.QWidget(self.Header)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_3.sizePolicy().hasHeightForWidth())
        self.widget_3.setSizePolicy(sizePolicy)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout.addWidget(self.widget_3)
        self.Clock = QtWidgets.QLabel(self.Header)
        self.Clock.setMinimumSize(QtCore.QSize(50, 50))
        self.Clock.setMaximumSize(QtCore.QSize(50, 50))
        self.Clock.setText("")
        self.Clock.setPixmap(QtGui.QPixmap("../assets/clock.png"))
        self.Clock.setScaledContents(True)
        self.Clock.setObjectName("Clock")
        self.horizontalLayout.addWidget(self.Clock)
        self.verticalLayout_2.addWidget(self.Header)
        self.AddCategory = QtWidgets.QGroupBox(self.centralwidget)
        self.AddCategory.setGeometry(QtCore.QRect(30, 160, 551, 221))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(4)
        sizePolicy.setVerticalStretch(6)
        sizePolicy.setHeightForWidth(self.AddCategory.sizePolicy().hasHeightForWidth())
        self.AddCategory.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.AddCategory.setFont(font)
        self.AddCategory.setStyleSheet("color: rgb(255, 255, 255);")
        self.AddCategory.setObjectName("AddCategory")
        self.widget_5 = QtWidgets.QWidget(self.AddCategory)
        self.widget_5.setGeometry(QtCore.QRect(10, 130, 521, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.widget_5.sizePolicy().hasHeightForWidth())
        self.widget_5.setSizePolicy(sizePolicy)
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_5)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.addcat = QtWidgets.QPushButton(self.widget_5)
        self.addcat.setMinimumSize(QtCore.QSize(120, 35))
        self.addcat.setMaximumSize(QtCore.QSize(120, 35))
        self.addcat.setEnabled(False)

        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.addcat.setFont(font)
        self.addcat.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);\n"
"")
        self.addcat.setObjectName("addcat")
        self.horizontalLayout_2.addWidget(self.addcat)
        self.upcat = QtWidgets.QPushButton(self.widget_5)
        self.upcat.setMinimumSize(QtCore.QSize(120, 35))
        self.upcat.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.upcat.setFont(font)
        self.upcat.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);\n"
"")
        self.upcat.setObjectName("upcat")
        self.horizontalLayout_2.addWidget(self.upcat)
        self.decatt = QtWidgets.QPushButton(self.widget_5)
        self.decatt.setMinimumSize(QtCore.QSize(120, 35))
        self.decatt.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.decatt.setFont(font)
        self.decatt.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.decatt.setObjectName("decatt")
        self.horizontalLayout_2.addWidget(self.decatt)
        self.clcat = QtWidgets.QPushButton(self.widget_5)
        self.clcat.setMinimumSize(QtCore.QSize(120, 35))
        self.clcat.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.clcat.setFont(font)
        self.clcat.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.clcat.setObjectName("clcat")
        self.horizontalLayout_2.addWidget(self.clcat)
        self.layoutWidget = QtWidgets.QWidget(self.AddCategory)
        self.layoutWidget.setGeometry(QtCore.QRect(12, 30, 511, 101))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.widget_4 = QtWidgets.QWidget(self.layoutWidget)
        self.widget_4.setObjectName("widget_4")
        self.formLayout = QtWidgets.QFormLayout(self.widget_4)
        self.formLayout.setHorizontalSpacing(20)
        self.formLayout.setVerticalSpacing(25)
        self.formLayout.setObjectName("formLayout")
        self.categoryid = QtWidgets.QLabel(self.widget_4)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.categoryid.setFont(font)
        self.categoryid.setStyleSheet("    color: rgb(75, 226, 156);\n"
"")
        self.categoryid.setObjectName("categoryid")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.categoryid)
        self.categoryname = QtWidgets.QLabel(self.widget_4)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.categoryname.setFont(font)
        self.categoryname.setStyleSheet("    color: rgb(75, 226, 156);\n"
"")
        self.categoryname.setObjectName("categoryname")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.categoryname)
        self.catid = QtWidgets.QLineEdit(self.widget_4)
        self.catid.setStyleSheet("background-color: rgb(255, 255, 255) ;color: rgb(0,0,0);font-size: 9pt")

        self.catid.setObjectName("catid")
        self.catid.textChanged.connect(self.disableButtonAddCat)

        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.catid)
        self.catname = QtWidgets.QLineEdit(self.widget_4)
        self.catname.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0,0,0);font-size: 9pt")
        self.catname.setObjectName("catname")
        self.catname.textChanged.connect(self.disableButtonAddCat)

        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.catname)
        self.horizontalLayout_3.addWidget(self.widget_4)
        self.searchcat = QtWidgets.QPushButton(self.layoutWidget)
        self.searchcat.setMinimumSize(QtCore.QSize(120, 35))
        self.searchcat.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.searchcat.setFont(font)
        self.searchcat.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.searchcat.setObjectName("searchcat")
        self.horizontalLayout_3.addWidget(self.searchcat)
        self.Addsubcategory = QtWidgets.QGroupBox(self.centralwidget)
        self.Addsubcategory.setGeometry(QtCore.QRect(30, 400, 551, 271))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(4)
        sizePolicy.setVerticalStretch(6)
        sizePolicy.setHeightForWidth(self.Addsubcategory.sizePolicy().hasHeightForWidth())
        self.Addsubcategory.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Addsubcategory.setFont(font)
        self.Addsubcategory.setStyleSheet("    color: rgb(255, 255, 255);\n"
"")
        self.Addsubcategory.setObjectName("Addsubcategory")
        self.widget_6 = QtWidgets.QWidget(self.Addsubcategory)
        self.widget_6.setGeometry(QtCore.QRect(10, 200, 521, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.widget_6.sizePolicy().hasHeightForWidth())
        self.widget_6.setSizePolicy(sizePolicy)
        self.widget_6.setObjectName("widget_6")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.widget_6)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.addsub = QtWidgets.QPushButton(self.widget_6)
        self.addsub.setMinimumSize(QtCore.QSize(120, 35))
        self.addsub.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.addsub.setFont(font)
        self.addsub.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.addsub.setObjectName("addsub")
        self.horizontalLayout_4.addWidget(self.addsub)
        self.upsub = QtWidgets.QPushButton(self.widget_6)
        self.upsub.setMinimumSize(QtCore.QSize(120, 35))
        self.upsub.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.upsub.setFont(font)
        self.upsub.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.upsub.setObjectName("upsub")
        self.horizontalLayout_4.addWidget(self.upsub)
        self.desub = QtWidgets.QPushButton(self.widget_6)
        self.desub.setMinimumSize(QtCore.QSize(120, 35))
        self.desub.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.desub.setFont(font)
        self.desub.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);\n"
"")
        self.desub.setObjectName("desub")
        self.horizontalLayout_4.addWidget(self.desub)
        self.clsub = QtWidgets.QPushButton(self.widget_6)
        self.clsub.setMinimumSize(QtCore.QSize(120, 35))
        self.clsub.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.clsub.setFont(font)
        self.clsub.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.clsub.setObjectName("clsub")
        self.horizontalLayout_4.addWidget(self.clsub)
        self.searchsub = QtWidgets.QPushButton(self.Addsubcategory)
        self.searchsub.setGeometry(QtCore.QRect(402, 63, 120, 35))
        self.searchsub.setMinimumSize(QtCore.QSize(120, 35))
        self.searchsub.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.searchsub.setFont(font)
        self.searchsub.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.searchsub.setObjectName("searchsub")
        self.widget_7 = QtWidgets.QWidget(self.Addsubcategory)
        self.widget_7.setGeometry(QtCore.QRect(10, 40, 381, 151))
        self.widget_7.setStyleSheet("    color: rgb(75, 226, 156);\n"
"")
        self.widget_7.setObjectName("widget_7")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.widget_7)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.subcatid = QtWidgets.QLabel(self.widget_7)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.subcatid.setFont(font)
        self.subcatid.setStyleSheet("#CategoryLabel{\n"
"    color: rgb(75, 226, 5);\n"
"}")
        self.subcatid.setObjectName("subcatid")
        self.verticalLayout.addWidget(self.subcatid)
        self.selectcat = QtWidgets.QLabel(self.widget_7)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.selectcat.setFont(font)
        self.selectcat.setStyleSheet("#SubCategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.selectcat.setObjectName("selectcat")
        self.verticalLayout.addWidget(self.selectcat)
        self.subcatname = QtWidgets.QLabel(self.widget_7)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.subcatname.setFont(font)
        self.subcatname.setStyleSheet("#SubCategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.subcatname.setObjectName("subcatname")
        self.verticalLayout.addWidget(self.subcatname)
        self.horizontalLayout_5.addLayout(self.verticalLayout)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.subid = QtWidgets.QLineEdit(self.widget_7)
        self.subid.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0,0,0);font-size: 9pt")
        self.subid.setObjectName("subid")
        self.verticalLayout_3.addWidget(self.subid)
        self.SubCategoryInput_2 = QtWidgets.QComboBox(self.widget_7)
        self.SubCategoryInput_2.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0,0,0);font-size: 9pt")
        self.SubCategoryInput_2.setObjectName("SubCategoryInput_2")
        self.verticalLayout_3.addWidget(self.SubCategoryInput_2)
        self.subname = QtWidgets.QLineEdit(self.widget_7)
        self.subname.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0,0,0);font-size: 9pt;")
        self.subname.setObjectName("subname")
        self.verticalLayout_3.addWidget(self.subname)
        self.horizontalLayout_5.addLayout(self.verticalLayout_3)
        self.ProductManage = QtWidgets.QGroupBox(self.centralwidget)
        self.ProductManage.setGeometry(QtCore.QRect(630, 160, 621, 511))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(4)
        sizePolicy.setVerticalStretch(6)
        sizePolicy.setHeightForWidth(self.ProductManage.sizePolicy().hasHeightForWidth())
        self.ProductManage.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.ProductManage.setFont(font)
        self.ProductManage.setStyleSheet("    color: rgb(255, 255, 255);\n"
"    color: rgb(255, 255, 255);\n"
"")
        self.ProductManage.setFlat(False)
        self.ProductManage.setCheckable(False)
        self.ProductManage.setObjectName("ProductManage")
        self.widget_8 = QtWidgets.QWidget(self.ProductManage)
        self.widget_8.setGeometry(QtCore.QRect(50, 440, 521, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.widget_8.sizePolicy().hasHeightForWidth())
        self.widget_8.setSizePolicy(sizePolicy)
        self.widget_8.setObjectName("widget_8")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.widget_8)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.addpro = QtWidgets.QPushButton(self.widget_8)
        self.addpro.setMinimumSize(QtCore.QSize(120, 35))
        self.addpro.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.addpro.setFont(font)
        self.addpro.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.addpro.setObjectName("addpro")
        self.horizontalLayout_6.addWidget(self.addpro)
        self.uppro = QtWidgets.QPushButton(self.widget_8)
        self.uppro.setMinimumSize(QtCore.QSize(120, 35))
        self.uppro.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.uppro.setFont(font)
        self.uppro.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.uppro.setObjectName("uppro")
        self.horizontalLayout_6.addWidget(self.uppro)
        self.depro = QtWidgets.QPushButton(self.widget_8)
        self.depro.setMinimumSize(QtCore.QSize(120, 35))
        self.depro.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.depro.setFont(font)
        self.depro.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.depro.setObjectName("depro")
        self.horizontalLayout_6.addWidget(self.depro)
        self.clpro = QtWidgets.QPushButton(self.widget_8)
        self.clpro.setMinimumSize(QtCore.QSize(120, 35))
        self.clpro.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.clpro.setFont(font)
        self.clpro.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.clpro.setObjectName("clpro")
        self.horizontalLayout_6.addWidget(self.clpro)
        self.searchpro = QtWidgets.QPushButton(self.ProductManage)
        self.searchpro.setGeometry(QtCore.QRect(400, 70, 120, 35))
        self.searchpro.setMinimumSize(QtCore.QSize(120, 35))
        self.searchpro.setMaximumSize(QtCore.QSize(120, 35))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.searchpro.setFont(font)
        self.searchpro.setStyleSheet("background-color: rgb(225, 225, 225);\n"
"color: rgb(0, 0, 0);")
        self.searchpro.setObjectName("searchpro")
        self.widget_9 = QtWidgets.QWidget(self.ProductManage)
        self.widget_9.setGeometry(QtCore.QRect(20, 40, 361, 371))
        self.widget_9.setStyleSheet("    color: rgb(75, 226, 156);\n"
"")
        self.widget_9.setObjectName("widget_9")
        self.gridLayout = QtWidgets.QGridLayout(self.widget_9)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.ProductId = QtWidgets.QLabel(self.widget_9)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ProductId.setFont(font)
        self.ProductId.setStyleSheet("#CategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.ProductId.setObjectName("ProductId")
        self.gridLayout.addWidget(self.ProductId, 0, 0, 1, 1)
        self.pid = QtWidgets.QLineEdit(self.widget_9)
        self.pid.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0,0,0);font-size: 9pt")
        self.pid.setObjectName("pid")
        self.gridLayout.addWidget(self.pid, 0, 1, 1, 1)
        self.category = QtWidgets.QLabel(self.widget_9)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.category.setFont(font)
        self.category.setStyleSheet("#SubCategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.category.setObjectName("category")
        self.gridLayout.addWidget(self.category, 1, 0, 1, 1)
        self.SubCategoryInput_3 = QtWidgets.QComboBox(self.widget_9)
        self.SubCategoryInput_3.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0,0,0);font-size: 9pt")
        self.SubCategoryInput_3.setObjectName("SubCategoryInput_3")
        self.gridLayout.addWidget(self.SubCategoryInput_3, 1, 1, 1, 1)
        self.subcategory = QtWidgets.QLabel(self.widget_9)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.subcategory.setFont(font)
        self.subcategory.setStyleSheet("#SubCategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.subcategory.setObjectName("subcategory")
        self.gridLayout.addWidget(self.subcategory, 2, 0, 1, 1)
        self.subline = QtWidgets.QComboBox(self.widget_9)
        self.subline.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0,0,0);font-size: 9pt")
        self.subline.setObjectName("subline")
        self.gridLayout.addWidget(self.subline, 2, 1, 1, 1)
        self.productname = QtWidgets.QLabel(self.widget_9)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.productname.setFont(font)
        self.productname.setStyleSheet("#SubCategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.productname.setObjectName("productname")
        self.gridLayout.addWidget(self.productname, 3, 0, 1, 1)
        self.proname = QtWidgets.QLineEdit(self.widget_9)
        self.proname.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0,0,0);font-size: 9pt")
        self.proname.setObjectName("proname")
        self.gridLayout.addWidget(self.proname, 3, 1, 1, 1)
        self.ProductQTY = QtWidgets.QLabel(self.widget_9)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ProductQTY.setFont(font)
        self.ProductQTY.setStyleSheet("#SubCategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.ProductQTY.setObjectName("ProductQTY")
        self.gridLayout.addWidget(self.ProductQTY, 4, 0, 1, 1)
        self.proqtyline = QtWidgets.QLineEdit(self.widget_9)
        self.proqtyline.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(255,0,0);font-size: 9pt")
        self.proqtyline.setObjectName("proqtyline")
        self.gridLayout.addWidget(self.proqtyline, 4, 1, 1, 1)
        self.sellingprice = QtWidgets.QLabel(self.widget_9)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.sellingprice.setFont(font)
        self.sellingprice.setStyleSheet("#SubCategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.sellingprice.setObjectName("sellingprice")
        self.gridLayout.addWidget(self.sellingprice, 5, 0, 1, 1)
        self.sell = QtWidgets.QLineEdit(self.widget_9)
        self.sell.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(255,0,0);font-size: 9pt")
        self.sell.setObjectName("sell")
        self.gridLayout.addWidget(self.sell, 5, 1, 1, 1)
        self.costprice = QtWidgets.QLabel(self.widget_9)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.costprice.setFont(font)
        self.costprice.setStyleSheet("#SubCategoryLabel{\n"
"    color: rgb(75, 226, 156);\n"
"}")
        self.costprice.setObjectName("costprice")
        self.gridLayout.addWidget(self.costprice, 6, 0, 1, 1)
        self.lineEdit_10 = QtWidgets.QLineEdit(self.widget_9)
        self.lineEdit_10.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(255,0,0);font-size: 9pt")
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.gridLayout.addWidget(self.lineEdit_10, 6, 1, 1, 1)
        self.AddCategory.raise_()
        self.frame.raise_()
        self.Addsubcategory.raise_()
        self.ProductManage.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Product.setText(_translate("MainWindow", "Product Management"))
        self.AddCategory.setTitle(_translate("MainWindow", "Add Category"))
        self.addcat.setText(_translate("MainWindow", "Add"))
        self.upcat.setText(_translate("MainWindow", "Update"))
        self.decatt.setText(_translate("MainWindow", "Delete"))
        self.clcat.setText(_translate("MainWindow", "Clear"))
        self.categoryid.setText(_translate("MainWindow", "Category ID"))
        self.categoryname.setText(_translate("MainWindow", "Category Name"))
        self.searchcat.setText(_translate("MainWindow", "Search"))
        self.Addsubcategory.setTitle(_translate("MainWindow", "Add Sub Category"))
        self.addsub.setText(_translate("MainWindow", "Add"))
        self.upsub.setText(_translate("MainWindow", "Update"))
        self.desub.setText(_translate("MainWindow", "Delete"))
        self.clsub.setText(_translate("MainWindow", "Clear"))
        self.searchsub.setText(_translate("MainWindow", "Search"))
        self.subcatid.setText(_translate("MainWindow", "Sub Category ID"))
        self.selectcat.setText(_translate("MainWindow", "Select Category"))
        self.subcatname.setText(_translate("MainWindow", "Sub Category Name"))
        self.ProductManage.setTitle(_translate("MainWindow", "Product Manage"))
        self.addpro.setText(_translate("MainWindow", "Add"))
        self.uppro.setText(_translate("MainWindow", "Update"))
        self.depro.setText(_translate("MainWindow", "Delete"))
        self.clpro.setText(_translate("MainWindow", "Clear"))
        self.searchpro.setText(_translate("MainWindow", "Search"))
        self.ProductId.setText(_translate("MainWindow", "Product ID"))
        self.category.setText(_translate("MainWindow", "Category"))
        self.subcategory.setText(_translate("MainWindow", "Sub Category "))
        self.productname.setText(_translate("MainWindow", "Product Name"))
        self.ProductQTY.setText(_translate("MainWindow", "Product QTY"))
        self.proqtyline.setText(_translate("MainWindow", "0"))
        self.sellingprice.setText(_translate("MainWindow", "Selling Price"))
        self.sell.setText(_translate("MainWindow", "0"))
        self.costprice.setText(_translate("MainWindow", "Cost Price"))
        self.lineEdit_10.setText(_translate("MainWindow", "0"))

        

        

#Code fait par moi :
#3 collections : Category / Sub Category /Product

        

                
                                
        
#connection des boutons Add
        self.addcat.clicked.connect(self.Ajout_categorie)
        self.addsub.clicked.connect(self.Ajout_souscategorie)
        self.addpro.clicked.connect(self.Ajout_produit)
        self.refresh()
#connection des boutons update
        
        self.upcat.clicked.connect(self.updateCat)
        self.upsub.clicked.connect(self.updateSousCat)
        self.uppro.clicked.connect(self.updateProduct)


#connection des boutons Delete 
        self.decatt.clicked.connect(self.deleteCategory)
        self.depro.clicked.connect(self.deleteProduct)
        self.desub.clicked.connect(self.deleteSousCategory)     
        

#connection des boutons Search 
        self.searchcat.clicked.connect(self.SearchCatname)
        self.searchsub.clicked.connect(self.SearchSousCatname)
        self.searchpro.clicked.connect(self.searchProduct)


#connection des boutons Clear
        self.clcat.clicked.connect(self.ClearCategory)
        self.clsub.clicked.connect(self.ClearSubcategory)
        self.clpro.clicked.connect(self.ClearProduct)
#boites de message
        #ModifiÃ© avec succÃ©s
        self.msg = QMessageBox()
        self.msg.setIcon(QMessageBox.Information)
        self.msg.setText("ModifiÃ© avec succÃ©s.")
        self.msg.setWindowTitle("Message d'information")
        
        self.msg7 = QMessageBox()
        self.msg7.setIcon(QMessageBox.Warning)
        self.msg7.setText("ElÃ©ment existe dÃ©jÃ .")

        self.msg7.setWindowTitle("Message d'information")
        

        #AjoutÃ© avec succÃ©s
        self.msg2 = QMessageBox()
        self.msg2.setIcon(QMessageBox.Information)
        self.msg2.setText("AjoutÃ© avec succÃ¨s")
        self.msg2.setWindowTitle("Message d'information")

        self.SubCategoryInput_3.setCurrentIndex(-1)

        #Echec d'opÃ©ration
        self.msg3 = QMessageBox()
        self.msg3.setIcon(QMessageBox.Warning)
        self.msg3.setText("Echec d'opÃ©ration")
        self.msg3.setWindowTitle("Message d'information")

        #ElÃ©ment trouvÃ©
        self.msg4 = QMessageBox()
        self.msg4.setIcon(QMessageBox.Information)
        self.msg4.setText("Element trouvÃ©")
        self.msg4.setWindowTitle("Message d'information")

        #SupprimÃ© avec succÃ©s
        self.msg5 = QMessageBox()
        self.msg5.setIcon(QMessageBox.Information)
        self.msg5.setText("SupprimÃ© avec succÃ©s")
        self.msg5.setWindowTitle("Message d'information")
#dependance des combobox 
        self.SubCategoryInput_3.currentTextChanged.connect(self.dependency)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())