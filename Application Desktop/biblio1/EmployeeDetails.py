# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'EmployeeDetails.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pymongo
import pandas as pd
import sys
from PyQt5.uic import loadUi
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import  QMessageBox
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
db = myclient["Employee"]
#collection 
collection_Employee=db["Employee"]


class Ui_Form(object):
    def showAll(self):
        self.stackedWidget.setCurrentWidget(self.all)
        df = pd.DataFrame(list(collection_Employee.find()))
        self.table.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.table.setColumnCount(len(df.columns))
        self.table.setRowCount(len(df.index))
        for i in range(len(df.index)):
            for j in range(len(df.columns)):
                self.table.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))

    def showSearch(self):
        self.stackedWidget.setCurrentWidget(self.search)
        choice = self.combo.currentText()

        if (choice == "Emp ID"):

            text = self.text.text()
            res = list(collection_Employee.find({"_id" : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"_id" : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))
                    
        elif (choice == "Name"):
            text = self.text.text()
            res = list(collection_Employee.find({"Name" : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"Name" : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))
            
        elif (choice == "Contact"):
            text = self.text.text()
            res = list(collection_Employee.find({"Contact No." : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"Contact No." : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))
        
        elif (choice == "Gender"):
            text = self.text.text()
            res = list(collection_Employee.find({"Gender" : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"Gender" : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))
        
        elif (choice == "Proof Type"):
            text = self.text.text()
            res = list(collection_Employee.find({"Proof Type" : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"Proof Type" : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))

        elif (choice == "Proof No."):
            text = self.text.text()
            res = list(collection_Employee.find({"Proof No." : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"Proof No." : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))

        elif (choice == "Adress"):
            text = self.text.text()
            res = list(collection_Employee.find({"Adress" : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"Adress" : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))

        elif (choice == "Email"):
            text = self.text.text()
            res = list(collection_Employee.find({"Email" : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"Email" : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))

        elif (choice == "Designation"):
            text = self.text.text()
            res = list(collection_Employee.find({"Designation" : str(text)}))
            if(res == []):
                msg = QMessageBox()
                msg.setWindowTitle("ERROR")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Not Found!")
                retval = msg.exec_() 
            else:
                df = pd.DataFrame(list(collection_Employee.find({"Designation" : str(text)})))
                self.table2.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
                self.table2.setColumnCount(len(df.columns))
                self.table2.setRowCount(len(df.index))
                for i in range(len(df.index)):
                    for j in range(len(df.columns)):
                        self.table2.setItem(i,j,QTableWidgetItem(str(df.iloc[i, j])))
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1280, 720)
        Form.setStyleSheet("background-color: rgb(34, 76, 132);")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(30, 10, 1221, 80))
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setLineWidth(4)
        self.frame.setMidLineWidth(1)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(460, 20, 331, 51))
        self.label.setStyleSheet("color: rgb(34, 76, 132);\n"
"font: 75 26pt \"Times New Roman\";")
        self.label.setObjectName("label")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(30, 100, 1221, 80))
        self.groupBox.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 8pt \"MS Shell Dlg 2\";")
        self.groupBox.setFlat(False)
        self.groupBox.setObjectName("groupBox")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(14, 30, 91, 21))
        self.label_2.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";\n"
"color: rgb(0, 255, 127);")
        self.label_2.setObjectName("label_2")
        self.combo = QtWidgets.QComboBox(self.groupBox)
        self.combo.setGeometry(QtCore.QRect(110, 30, 181, 31))
        self.combo.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.combo.setObjectName("combo")
        self.combo.addItem("")
        self.combo.addItem("")
        self.combo.addItem("")
        self.combo.addItem("")
        self.combo.addItem("")
        self.combo.addItem("")
        self.combo.addItem("")
        self.combo.addItem("")
        self.combo.addItem("")
        self.searchButton = QtWidgets.QPushButton(self.groupBox)
        self.searchButton.setGeometry(QtCore.QRect(490, 30, 75, 31))
        self.searchButton.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.searchButton.setObjectName("searchButton")
        self.allButton = QtWidgets.QPushButton(self.groupBox)
        self.allButton.setGeometry(QtCore.QRect(590, 20, 151, 51))
        self.allButton.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 75 10pt \"Times New Roman\";\n"
"color: rgb(0, 0, 0);")
        self.allButton.setObjectName("allButton")
        self.text = QtWidgets.QLineEdit(self.groupBox)
        self.text.setGeometry(QtCore.QRect(300, 30, 171, 31))
        self.text.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.text.setObjectName("text")
        self.groupBox_2 = QtWidgets.QGroupBox(Form)
        self.groupBox_2.setGeometry(QtCore.QRect(70, 190, 1141, 481))
        self.groupBox_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 14pt \"MS Serif\";")
        self.groupBox_2.setObjectName("groupBox_2")
        self.stackedWidget = QtWidgets.QStackedWidget(self.groupBox_2)
        self.stackedWidget.setGeometry(QtCore.QRect(10, 20, 1121, 451))
        self.stackedWidget.setStyleSheet("")
        self.stackedWidget.setObjectName("stackedWidget")
        self.search = QtWidgets.QWidget()
        self.search.setObjectName("search")
        self.table2 = QtWidgets.QTableWidget(self.search)
        self.table2.setGeometry(QtCore.QRect(40, 10, 1011, 431))
        self.table2.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);\n"
"font: 10pt \"Nirmala UI\";")
        self.table2.setObjectName("table2")
        self.table2.setColumnCount(10)
        self.table2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.table2.setHorizontalHeaderItem(9, item)
        self.table2.horizontalHeader().setVisible(True)
        self.stackedWidget.addWidget(self.search)
        self.all = QtWidgets.QWidget()
        self.all.setObjectName("all")
        self.table = QtWidgets.QTableWidget(self.all)
        self.table.setGeometry(QtCore.QRect(40, 10, 1011, 431))
        self.table.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);\n"
"font: 10pt \"Nirmala UI\";")
        self.table.setObjectName("table")
        self.table.setColumnCount(10)
        self.table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(9, item)
        self.stackedWidget.addWidget(self.all)

        self.retranslateUi(Form)
        self.combo.setCurrentIndex(-1)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Employee Details"))
        self.groupBox.setTitle(_translate("Form", "Search Employee"))
        self.label_2.setText(_translate("Form", "Search By"))
        self.combo.setItemText(0, _translate("Form", "Emp ID"))
        self.combo.setItemText(1, _translate("Form", "Name"))
        self.combo.setItemText(2, _translate("Form", "Contact"))
        self.combo.setItemText(3, _translate("Form", "Gender"))
        self.combo.setItemText(4, _translate("Form", "Proof Type"))
        self.combo.setItemText(5, _translate("Form", "Proof No."))
        self.combo.setItemText(6, _translate("Form", "Adress"))
        self.combo.setItemText(7, _translate("Form", "Email"))
        self.combo.setItemText(8, _translate("Form", "Designation"))
        self.searchButton.setText(_translate("Form", "Search"))
        self.allButton.setText(_translate("Form", "Show All Employees"))
        self.groupBox_2.setTitle(_translate("Form", "Bill Details"))
        item = self.table2.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Emp ID"))
        item = self.table2.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Name"))
        item = self.table2.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Contact No."))
        item = self.table2.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Adress"))
        item = self.table2.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Email"))
        item = self.table2.horizontalHeaderItem(5)
        item.setText(_translate("Form", "password"))
        item = self.table2.horizontalHeaderItem(6)
        item.setText(_translate("Form", "Designation"))
        item = self.table2.horizontalHeaderItem(7)
        item.setText(_translate("Form", "Gender"))
        item = self.table2.horizontalHeaderItem(8)
        item.setText(_translate("Form", "Proof of ID"))
        item = self.table2.horizontalHeaderItem(9)
        item.setText(_translate("Form", "Proof NO"))
        item = self.table.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Emp ID"))
        item = self.table.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Name"))
        item = self.table.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Contact No."))
        item = self.table.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Gender"))
        item = self.table.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Proof type"))
        item = self.table.horizontalHeaderItem(5)
        item.setText(_translate("Form", "Proof No."))
        item = self.table.horizontalHeaderItem(6)
        item.setText(_translate("Form", "Adress"))
        item = self.table.horizontalHeaderItem(7)
        item.setText(_translate("Form", "Email"))
        item = self.table.horizontalHeaderItem(8)
        item.setText(_translate("Form", "Password"))
        item = self.table.horizontalHeaderItem(9)
        item.setText(_translate("Form", "Designation"))
        


        self.allButton.clicked.connect(self.showAll)
        self.searchButton.clicked.connect(self.showSearch)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
